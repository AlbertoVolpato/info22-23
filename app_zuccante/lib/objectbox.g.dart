// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';

import 'models/save_circolari.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 3931745369026642859),
      name: 'SaveCircolare',
      lastPropertyId: const IdUid(9, 6811384684986948494),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5218167741593865470),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 243403605728978863),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2508662853108000328),
            name: 'protocollo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2579556064549168226),
            name: 'categoria',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4483104096792375963),
            name: 'link',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1922629867811738465),
            name: 'pubblicazione',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7828800405355779213),
            name: 'scadenza',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4215277985489574634),
            name: 'titoloAllegati',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 6811384684986948494),
            name: 'linkAllegati',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Store openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) =>
    Store(getObjectBoxModel(),
        directory: directory,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 3931745369026642859),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    SaveCircolare: EntityDefinition<SaveCircolare>(
        model: _entities[0],
        toOneRelations: (SaveCircolare object) => [],
        toManyRelations: (SaveCircolare object) => {},
        getId: (SaveCircolare object) => object.id,
        setId: (SaveCircolare object, int id) {
          object.id = id;
        },
        objectToFB: (SaveCircolare object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final protocolloOffset = fbb.writeString(object.protocollo);
          final categoriaOffset = fbb.writeString(object.categoria);
          final linkOffset = fbb.writeString(object.link);
          final titoloAllegatiOffset = fbb.writeList(object.titoloAllegati
              .map(fbb.writeString)
              .toList(growable: false));
          final linkAllegatiOffset = fbb.writeList(
              object.linkAllegati.map(fbb.writeString).toList(growable: false));
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, protocolloOffset);
          fbb.addOffset(3, categoriaOffset);
          fbb.addOffset(4, linkOffset);
          fbb.addInt64(5, object.pubblicazione.millisecondsSinceEpoch);
          fbb.addInt64(6, object.scadenza.millisecondsSinceEpoch);
          fbb.addOffset(7, titoloAllegatiOffset);
          fbb.addOffset(8, linkAllegatiOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SaveCircolare(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              title: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              protocollo: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              categoria: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              link: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              pubblicazione: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)),
              scadenza: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)),
              titoloAllegati:
                  const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 18, []),
              linkAllegati: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 20, []));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [SaveCircolare] entity fields to define ObjectBox queries.
class SaveCircolare_ {
  /// see [SaveCircolare.id]
  static final id =
      QueryIntegerProperty<SaveCircolare>(_entities[0].properties[0]);

  /// see [SaveCircolare.title]
  static final title =
      QueryStringProperty<SaveCircolare>(_entities[0].properties[1]);

  /// see [SaveCircolare.protocollo]
  static final protocollo =
      QueryStringProperty<SaveCircolare>(_entities[0].properties[2]);

  /// see [SaveCircolare.categoria]
  static final categoria =
      QueryStringProperty<SaveCircolare>(_entities[0].properties[3]);

  /// see [SaveCircolare.link]
  static final link =
      QueryStringProperty<SaveCircolare>(_entities[0].properties[4]);

  /// see [SaveCircolare.pubblicazione]
  static final pubblicazione =
      QueryIntegerProperty<SaveCircolare>(_entities[0].properties[5]);

  /// see [SaveCircolare.scadenza]
  static final scadenza =
      QueryIntegerProperty<SaveCircolare>(_entities[0].properties[6]);

  /// see [SaveCircolare.titoloAllegati]
  static final titoloAllegati =
      QueryStringVectorProperty<SaveCircolare>(_entities[0].properties[7]);

  /// see [SaveCircolare.linkAllegati]
  static final linkAllegati =
      QueryStringVectorProperty<SaveCircolare>(_entities[0].properties[8]);
}
